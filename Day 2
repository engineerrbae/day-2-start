# day-2-start
What I learned Today: Day 02
# What I learned Today: Day 02

#print(len(123456))

#It throws the traceback error:
'''Traceback (most recent call last):
  File "main.py", line 1, in <module>
    print(len(123456))
TypeError: object of type 'int' has no len()'''

#Because we are trying to know the int's (integer) length & len function isn't trained to do so.

#Len function can tell you string's length. And now, question comes what is string & int? To understand it better. Data Types comes into the picture:

#1. String
#2. Integer
#3. Float
#4. Boolean

''' Subscript: The method of pulling out the particular charcter in string is called subscript.
print("helloworld"[0])
This will print out the H since H is the very first element placed at index 0.
'''
print("helloworld"[-1]) #prints the last character. Initial index starts from zero & last index starts from -1

print("123""345") #concatenates two strings

#To do the mathematical calculations. Declare the integer data type which is int

#2.Integer: All no.s no mattter are positive or negative or whole no.

print(1234+1234)
print(123_456_758) #computer visulaises it as large no. & prints it by removing underscore

#3.Float: Decimal Number. Called Floating point no. 314.516

#4. Boolean: Most used. Booleans are either True or False, they don't have quotation marks around them, otherwise it would turn them into a String. Written as:
#True
#False


print(type(len(input("What is your name\n"))))
#output:What is your namekawal
#<class 'int'> because we have printed out the length of the string

#--> Type check allows us to know the type of our number

# Type Conversion: Using it we can implicitly or explicitly changes the data type.
a=100
print(a)

print(type(a)) 
#type of the variable is integer
s=str(a)
#type casted the int vaiable to string
print(s)
print(type(s))

## Mathematical Operators in Python

1. +  ( addition )
2. -  ( Subtraction )
3. ** ( exponentiation )
4. // ( floor division )
5. *  ( Multiplication )

While calculation, python follows a order which is:

Paranthesis <- Exponentiation <- Multiplication <- Division <- Addition <- Subtraction

In short, it can be memorised as PEMDAS. As the calculation proceeds in Left to Right. So, now abbreviation turns to be PEMDASLR

Example:

(3*3+3/3-3)
First: 3*3: 9 - Second: 3/3: 1
9+1-3

Third: 9+1:10
Fourth: 10-3: 7 is the answer.

## Number manipulation & F-strings in python ##

print(8/3) -> It will output floating point number.

In order to print the int type of the result, we need to convert it to type int

print(int(8/3)) -> It will output int type number

Now, wondering if I wish to have round off result? Yes, it's possible in python using the round function.

print(round(8/3)) -> It will output instead of printing 2.666666 will print out 3.

Using this function, we can also go step further & decide the number of precision you want to round to. Suppose, If you want to round it to 4

print(round(8/3,4)) -> It will output 2.6667

Another way of getting the non-floating point number is using the floor division.

print(8//3) -> It will chop off the after decimals & will print int type

If you check it's type, will show the result is of type int.

print(type(8//3)) -> class <int>

Second way of writing mathematical calculations:

result=4/2 -> output: 2
result/=2 -> It will diivide the previous output with given 2. 2/2 & will store the result to the result.
print(result) -> output: 1

Another example:

score = 0
score += 1
print(score) -> output: 1

You can use this string manipulation with all the available operators in python.

Another problem comes when we are printing the results of different type we get the tracebacks. So for this python has a solution to incorpate with different data types:

score=0 -> int
height=1.8 ->float
is_Winning=True ->boolean

print("your score is" + str(score) + str(height) + str(is_Winning ) -> In place of this we will be using a diiferent manipulation which is f-string

print(f"your score is {score}") ->It does all the conversions in the backend. You don't have to worry about this

print(f"your score is {score}, your height is {height}, your is_winning ia {is_winning}") -> handling conversions of multiple data types

#Output: Your score is 0, your height is 1.8, your is_winning ia True

It cut downs the manual labour of type conversions




